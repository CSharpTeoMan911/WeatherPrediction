import io

import sklearn.linear_model as linear_model
import sklearn.preprocessing as preprocessing
import numpy as np
import json


def predict(model_name, day, month, year):
    model_file = ""
    match model_name:
        case "London":
            model_file = '''{
    "x_intercept": 52263.53532733637,
    "Beta_Coefficients": [
        -2.867567987454183e-08,
        1.9254189275155782e-14,
        -3.929353350415833e-14,
        -1.77906288655393e-13,
        2.2722937373108235e-15,
        9.027112482228285e-16,
        -4.467457997885539e-17,
        9.724522861052281e-18,
        3.1857718146541307e-19,
        -4.833302265647471e-16,
        1.5675497461778603e-15,
        -2.045679433021715e-14,
        2.6695875602966556e-16,
        8.424410453065026e-14,
        9.2053277172144e-13,
        -3.1742620255336763e-16,
        -3.1280400440765565e-14,
        -4.340845035087122e-16,
        -4.845347185280743e-15,
        -3.489770479990177e-15,
        1.572101132857981e-14,
        -4.7129882957212e-13,
        7.270044441567071e-17,
        1.1596862221245794e-12,
        -2.7669783659387068e-11,
        -2.3669077334497065e-14,
        2.748970006050639e-13,
        8.311870654001619e-11,
        4.620187266939106e-10,
        -1.3901597236391155e-13,
        -3.168846425095193e-13,
        -3.138578494410119e-11,
        -4.3085562864439374e-13,
        -3.252726481182124e-12,
        -1.345014539462286e-13,
        5.497377756295715e-14,
        -2.5186847425999294e-12,
        -1.95112352087414e-13,
        1.0649041722572206e-11,
        -3.8307937111039213e-10,
        -6.220533360582462e-13,
        -3.300116341891181e-12,
        7.611649026644576e-10,
        -2.3359657213630847e-08,
        -1.8846768518565247e-12,
        -3.1926060140655485e-11,
        1.8040776181969423e-10,
        5.467310636937125e-08,
        1.2337802197730123e-10,
        -2.9768101339044315e-12,
        -1.8442415445838185e-10,
        -2.1087957509527784e-10,
        -2.0994383992556694e-08,
        -2.7685533418729155e-10,
        -3.245866401798998e-11,
        -5.5890707370859256e-12,
        -3.986057690152967e-12,
        -1.1166126442199396e-10,
        -5.794349862805002e-12,
        -7.996837189560902e-11,
        1.5043964650462923e-09,
        -1.2470885553338476e-11,
        -2.4217120397885075e-10,
        6.771900639200447e-10,
        -3.851637655045848e-11,
        -2.7099950274379272e-11,
        -6.347853078219111e-10,
        -6.602914249138225e-09,
        4.555452476316858e-11,
        2.3463818003583178e-11,
        -3.851105716248552e-11,
        -1.888974309394793e-09,
        -3.2261496194413854e-08,
        4.5520689455797024e-10,
        -5.651761590065859e-11,
        -1.2129409717279603e-13,
        -1.1370619356763426e-10,
        -2.9757016323564097e-09,
        -1.8348647479679633e-07,
        2.208708637320423e-09,
        1.1384576249257026e-11,
        2.953326048387615e-13,
        2.6739149640057268e-14,
        5.580232148757233e-09,
        -1.8803141496274375e-08,
        5.67009545379424e-11,
        -5.425838429076005e-10,
        5.63129241883777e-10,
        -9.985441711895792e-12,
        -4.2031762926641207e-10,
        -1.3742211968009848e-10,
        -3.864144089343256e-12,
        -5.270817534381762e-13,
        -1.3720233638620407e-10,
        -2.7378996085703092e-09,
        3.6237097196389415e-11,
        -4.686826530561213e-13,
        1.7286205614288527e-14,
        -5.405663031420903e-10,
        -7.898110776132037e-09,
        1.940250152935078e-10,
        1.7948610101392426e-12,
        -1.852822840764886e-14,
        -5.885513420293222e-15,
        -1.7011547157839843e-09,
        -2.1934878320002174e-08,
        4.72457301231362e-10,
        1.2006913581859426e-11,
        -2.0968210184315889e-13,
        1.4551814217234257e-14,
        2.975528009264459e-17,
        -3.771123309235446e-09,
        -1.6588230570015473e-07,
        4.193819720814629e-09,
        5.4144985065986817e-11,
        -9.5969592407574e-13,
        -6.777704339187193e-16,
        -7.825840635768494e-17,
        -5.662554613572256e-18
    ],
    "polynomial_degree": 7
}'''
        case "Global":
            model_file = '''{
    "x_intercept": -157991.64558956292,
    "Beta_Coefficients": [
        7.408727829017587e-09,
        -2.0124928918898472e-11,
        3.898217906731598e-09,
        -2.031108363667919e-10,
        -2.7164454300237907e-11,
        -1.3296067551678162e-09,
        1.6234373768158924e-10,
        8.883945129731975e-12,
        -3.0876457521618297e-12,
        -6.662075268176833e-10,
        -4.767462675315625e-10,
        -1.6534605884417453e-08,
        1.1583097474609522e-09,
        -2.4954202212690917e-08,
        -6.661626622317704e-07,
        1.5508606784977398e-09,
        1.630398077321639e-07,
        3.86722122448799e-09,
        -2.2374209514804897e-09,
        -7.623371195150079e-09,
        3.5593761664940846e-09,
        -3.4770956415733366e-07,
        5.273873430222439e-09,
        -2.9813331173539255e-07,
        -4.049403262054804e-06,
        6.166729888932006e-09,
        7.802176512064731e-07,
        -1.5374597945452614e-05,
        1.5544630678407476e-07,
        -4.0904678003711286e-08,
        1.0375993525574491e-06,
        0.00010906188053482242,
        -7.978140590316011e-07,
        1.465743312468243e-07,
        -1.4170721790669674e-06,
        2.2923630149508825e-07,
        2.3004431690599918e-06,
        -4.911434403558383e-08,
        9.127847647133798e-06,
        -9.584526794053436e-08,
        -7.027759038281925e-08,
        -2.12377971494407e-06,
        -1.9810772883427825e-07,
        5.303484690068623e-09,
        -3.464478810353602e-07,
        -1.6986850151630537e-06,
        -1.4892092993802755e-08,
        1.6711991290503784e-08,
        -1.6028649647695525e-10,
        -7.739401655926909e-07,
        -4.846832022355004e-05,
        2.3547235582063633e-07,
        -1.0780981663509226e-07,
        7.899546669627434e-10,
        -1.1693667519318595e-10,
        5.355771736957153e-08,
        2.464245926623708e-07,
        -2.8554447158489882e-09,
        5.364523058361147e-07,
        -1.5913413280828673e-08,
        -1.0429020416520577e-09,
        -3.211008437922491e-06,
        1.4362698891010286e-08,
        -4.3041990305617335e-09,
        4.63854930263096e-11,
        -3.996980285079918e-06,
        1.3794119139640296e-07,
        1.949545977011243e-10,
        9.851206157231109e-11,
        -1.6279315377608175e-12,
        2.535001870835661e-05,
        -2.4471661817510405e-07,
        1.291007029034298e-09,
        6.824801410131251e-12,
        -4.500795201189451e-12,
        4.132589238657496e-14,
        6.0282179926308603e-05,
        -2.714686278782407e-07,
        2.351046526750192e-08,
        -1.4444260684652427e-10,
        2.6846013841488054e-11,
        -1.957771170596487e-13,
        2.429444943310283e-14
    ],
    "polynomial_degree": 6
}'''

    model_params = json.load(io.StringIO(model_file))

    beta_c = model_params["Beta_Coefficients"]
    x_i = model_params["x_intercept"]
    degree = model_params["polynomial_degree"]

    poly = preprocessing.PolynomialFeatures(degree=degree, include_bias=False).fit_transform(X=[[day, month, year]])
    model = linear_model.LinearRegression()
    model.coef_ = np.asarray(beta_c)
    model.intercept_ = x_i
    result = model.predict(poly)
    
    return round((result[0] - 32) * (5 / 9), 2)