import io

import sklearn.linear_model as linear_model
import sklearn.preprocessing as preprocessing
import numpy as np
import json


def predict(model_name, day, month, year):
    model_file = ""
    match model_name:
        case "London":
            model_file = '''{
    "x_intercept": -467275.0676310783,
    "Beta_Coefficients": [
        -1.9259304563140543e-11,
        3.06397637884197e-10,
        1.493522636062071e-08,
        -8.48659909213878e-09,
        -1.2596114259301993e-11,
        -6.246875540560193e-08,
        1.4978427762387896e-10,
        -9.105534697976749e-11,
        4.929360267105076e-10,
        -2.3534806334558638e-08,
        -2.1794119886715004e-09,
        -5.723702054338649e-07,
        3.779329413821932e-09,
        1.9344993177594817e-08,
        -3.1250141202646066e-05,
        1.2859502175585514e-09,
        1.5117837663043973e-07,
        -4.6208519568593077e-08,
        3.7179158954568156e-07,
        -3.382530360420533e-07,
        -5.353132153025368e-08,
        -1.1163464625579902e-05,
        2.0624915240805922e-08,
        -4.454601443426522e-07,
        -5.5086542572954536e-05,
        -4.02355900778431e-08,
        2.792159201354798e-06,
        7.77935437763692e-05,
        6.56354053013336e-07,
        -3.204301051523963e-07,
        8.639165735344817e-07,
        0.00010143179377150958,
        -1.2083249564673481e-06,
        4.3223113702533014e-07,
        1.7306048119323694e-05,
        -4.430874069775414e-06,
        3.045198861516563e-06,
        -3.890830373222767e-06,
        -1.575779626958059e-06,
        -7.843863557430743e-08,
        -3.39661992407191e-06,
        -1.1785589603569882e-05,
        1.2397371976262194e-07,
        5.5529514756766504e-08,
        -8.852123698906038e-07,
        -6.802920897713217e-05,
        8.278060643972338e-07,
        -8.091648035908607e-08,
        -6.298319234631541e-10,
        -5.5155943140405615e-06,
        -0.0003271009182179743,
        3.7969690285011937e-06,
        -1.1590281379565231e-07,
        1.229186850953734e-09,
        -3.449020136911851e-10,
        9.31308035947779e-07,
        -2.823825937124897e-07,
        -5.2559999084049794e-08,
        1.4522662861248352e-06,
        -8.590207159015146e-10,
        -7.060085011051506e-10,
        -3.5161079488458256e-06,
        -3.730655604962862e-08,
        1.1516266250151852e-09,
        3.432973175050697e-11,
        -1.7199557814830404e-05,
        3.5199142174679283e-07,
        4.810268083226831e-09,
        -6.442354243467722e-11,
        -1.3956343150141642e-11,
        -7.231363319007546e-05,
        1.7867336140929893e-06,
        1.8509937105913696e-08,
        -3.6271247583365107e-10,
        2.0958931248576493e-11,
        1.54678840983071e-13,
        -0.00028746193350431246,
        7.75995054600599e-06,
        8.844268031739817e-08,
        -1.5782644921847406e-09,
        3.1989423078613533e-11,
        -3.119768022890162e-13,
        7.164845999865503e-14
    ],
    "polynomial_degree": 6
}'''
        case "Global":
            model_file = '''{
    "x_intercept": -375494.03236801387,
    "Beta_Coefficients": [
        -8.377246532954907e-09,
        3.84127731519726e-07,
        9.916918840363128e-05,
        -0.0013167988157507117,
        -0.0003566398145484744,
        -0.08418767281621699,
        0.0006327569430777926,
        -0.00013656437594608914,
        0.0005018310326400401,
        -0.006296944021350608,
        0.0022920812784349175,
        -0.004306888235530889,
        0.007004056620040482,
        -0.06618749681289646,
        0.0004991824483049556,
        0.003730777711329331,
        0.4244611678281751,
        -0.0027158798890894588,
        0.00046554860391496126,
        0.004520700699409163,
        0.0534338738999457,
        -0.00029997263351772875,
        0.0089898952392623,
        -0.0013233711543292656,
        9.658664160692966e-06,
        -0.01896450323655294,
        -0.00013780126927756284,
        7.548821050589244e-05,
        -4.662978915114427e-07,
        -0.11805624099849842,
        0.0006583453686259521,
        -0.0004201035696670391,
        2.67766610372673e-06,
        -3.485168434242368e-07,
        3.500270244760628e-07,
        -2.492477153481429e-06,
        -2.255443242102362e-06,
        -4.532711188331984e-06,
        -2.651552004517832e-05,
        1.5083421115846124e-07,
        1.814814211961724e-05,
        -4.46688011676577e-06,
        6.57320585499381e-07,
        -3.73952341314876e-09,
        0.0002796807900124765,
        7.219186245785436e-06,
        6.570847501437965e-08,
        -2.115138066083322e-08,
        1.1879297805855726e-10,
        0.0021478017380870823,
        3.413684815188958e-05,
        -2.8481632606373875e-07,
        1.041561573445534e-07,
        -6.602191035629673e-10,
        6.954432158184226e-11
    ],
    "polynomial_degree": 5
}'''

    model_params = json.load(io.StringIO(model_file))

    beta_c = model_params["Beta_Coefficients"]
    x_i = model_params["x_intercept"]
    degree = model_params["polynomial_degree"]

    poly = preprocessing.PolynomialFeatures(degree=degree, include_bias=False).fit_transform(X=[[day, month, year]])
    model = linear_model.LinearRegression()
    model.coef_ = np.asarray(beta_c)
    model.intercept_ = x_i
    result = model.predict(poly)
    
    return round((result[0] - 32) * (5 / 9), 2)